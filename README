# Profiling-and-Characterization-of-HiDL-applications
In this project, I utilized TAU, a performance analysis tool framework developed by University of Oregon to profile the MPI communication.
(Link to Tau: http://www.cs.uoregon.edu/research/tau/home.php)
TAU provides a suite of stat- ic and dynamic tools that provide graphical user interaction and inter-operation to form an integrated analysis environment for parallel applications. The model that TAU uses to profile parallel, multi-threaded programs maintains performance data for each thread, context, and node in use by an application. The profiling instrumentation need- ed to implement the model captures data for C++ functions, methods, basic blocks, and statement execution at these levels.
From the profile data collected, TAU's profile analysis procedures generated a wealth of performance information. It shows the exclusive and inclusive time spent in each function with nanosecond resolution. It also shows the breakup of time spent for each node. Other data includes how many times each function was called, how many
Xu 1
profiled functions did each function invoke, and what the mean inclusive time per call was. Time information can also be displayed relative to nodes, contexts, and threads.
The experiments were conducted on Ohio Supercomputer Centerâ€™s Owens Cluster. Each node has 28 CPU cores and 1 NVIDIA Tesla P100 GPU. For this experi- ment I was using Pytorch 1.7 as my deep learning framework, and Horovod 0.21. Horovod was compiled with MVAPICH2.3.4-GDR CUDA-aware Message Passing Inter- face. MVAPICH2.3.4-GDR was installed with CUDA 10.2.89.
